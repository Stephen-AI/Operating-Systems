                    +-------------------------+
                    |           CS 439        |
                    | PROJECT 4: FILE SYSTEMS |
                    |      DESIGN DOCUMENT    |
                    +-------------------------+


The questions in this design document should reflect the design of the code you
wrote for the project.  Your grade will reflect both the quality of your answer
in this document and the quality of the design implementation in your code.  You
may receive partial credit for answering questions for parts of the project that
you did not get to implement, but you must indicate in your answer that there is
no corresponding implementation, or you will not receive any credit.


For each question, you should include both the name of the file(s), function
name(s), and the line numbers where the relevant code may be found.


These design documents should be completed individually.  Group members are
welcome to use this document as a guide for design and are welcome to discuss
the questions, but there should be no group notes or other sorts of copying of
design documents.


When you have completed your design document, submit it to the Canvas assignment
Project 4 Design and Documentation.  ***Your submission must be a text file and
each line must not extend past 80 characters.  In addition, your submission must
contain all of the original material and not exceed 18,000 characters.  The
character count will be measured using the Linux command wc.  (Note that rtf
files are NOT text files.)


---- Name ----


>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Stephen Aigbomian
EID: sa46979
CS login: stephen1
Email: stephenaigbomian@gmail.com
Unique Number: 51510

Slip days used on this project:


---- GROUP ----


>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.


Name1: David Mao
EID1: dm46452
CS login: dm46452
Email: david.mao@utexas.edu
Unique Number: 51510
Ranking : Excellent

Name2: YunFan Zhou
EID2: yz23926
CS login: yfzhou42
Email: yfzhou42@gmail.com
Unique Number: 51510
Ranking: Excellent

Name3: Matthew Hoffman
EID3: mrh3645
CS login: ringo
Email: ringohoffman@utexas.edu
Unique Number: 51530
Ranking : Excellent




---- PARTNER EVALUATION SCALE ----


>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.


>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.


>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.


>> Marginal: Sometimes failed to show up and/or rarely prepared.


>> Deficient: Often failed to show up and/or rarely prepared.


>> Unsatisfactory: Consistently failed to show up and/or unprepared.


>> Superficial: Practically no participation.


>> No Show: No participation at all.








---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission or notes for the
>> TAs, give them here.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


                     INDEXED AND EXTENSIBLE FILES
                     ============================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', ‘#define’, or
>> enumeration that was necessary for your indexed and extensible file
>> implementation.  Identify the purpose of each in 25 words or less.

#define DIRECT_LIMIT 5120
  Maximum number bytes in a file with a full direct block. 

#define FIRST_LEVEL_LIMIT 70656
  Maximum number of bytes in a file with a full first level of indirection.
    
#define SECOND_LEVEL_LIMIT 8459264
    Maximum number of bytes in a file with a full first level of indirection.

#define FIRST_LEVEL_SIZE (BLOCK_SECTOR_SIZE * (BLOCK_SECTOR_SIZE / 4))
    Number of bytes in first level of indirection only.

#define DIRECT_SECTORS 10
    Number of blocks in direct blocks.

static char zeros[BLOCK_SECTOR_SIZE];
    Array of zeroes to write to newly allocated disk sectors.

struct byte_query               
                                   
  {
    enum level_type type;      
    off_t direct_block_index;                                      
    off_t first_level_index;                                  
    off_t second_level_index;   
  };
    Used to store where exactly to find the sector at a particular offset. 
Stores indices to direct block and the levels of indirection as needed.

enum level_type
  {
    DIRECT_BLOCK,
    FIRST_LEVEL,
    SECOND_LEVEL,
    ERR
  };
    Used in byte_query to know exactly where in the inode a particular index was
found or if an invalid offset was passed.

struct inode_disk
  {
    size_t sectors_allocated;           /* # of sectors allocated to file */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    block_sector_t direct_blocks[10];   /* Direct data blocks */
    block_sector_t first_level;         /* 1st level indirection block */
    block_sector_t second_level;        /* 2nd level indirection block */
    uint32_t unused[111];               /* Not used. */
  };
    A representation of the layout of the inode on disk. Now modified to support
multi-indexed structures.

struct inode 
  {
    struct list_elem elem;              /* Element in inode list. */
    struct lock inode_lock;             /* lock for extending files */
    ...
  };
    The inode stored in memory, modified to hold an inode_lock to synchronize 
file extension.

static struct lock free_map_lock;    
    Synchronizes access to free map  

static struct lock open_inodes_lock;    
    Synchronizes access to list of open inodes


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
    DIRECT_BLOCK_SIZE = 512 B
    TOTAL # OF BLOCKS = # DIRECT + # FIRST_LEVEL + # SECOND_LEVEL
        where # is number of sectors
    SIZE OF block_sector_t = 4
    So a level of indirect can hold 512/4 sectors
    TOTAL # OF BLOCKS = (10 + 128 + (128 * 128)) * 512 = 8459264 B = 8.067 MB 

---- SYNCHRONIZATION ----


>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
    In inode_write_at, before we start writing, we check to see if this write
meets the condition for extension [1]. If it does, then a process would have to
acquire the inode_lock before extending the file making sure only one process is
extending at a time [2].
    [1]: inode.c:761, 764
    [2]: inode.c:768



>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
    We avoid this race by changing the length of the file after the write has 
been completed [1]. This way when the bytes left to be read is being calculated,
it is done based on the length of the file before the read [2]. 
    [1]: inode.c:828
    [2]: inode.c:686


>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, one or many processes reading from a file
>> cannot forever prevent another process from writing to the file, and
>> one or many processes writing to a file cannot forever prevent
>> another process from reading the file.
    We provide this "fairness" by removing the requirement for synchronization
in the read/write operations. So it is possible for multiple readers and writers
to operate in the same file concurrently. Synchronization is only needed when 2
processes try to extend a file at the same time.



---- RATIONALE ----


>> A6: Is your file layout a multilevel indexed structure?  If so, why
>> did you choose this particular combination of direct, indirect, and
>> doubly indirect blocks?  If not, why did you choose an alternative
>> file structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
>> In your explanation, include at least two reasons to support your 
>> choices.
    The first reason we used multilevel indexed structures was, as we could see
from the tests, a lot of the files are small files that can fit in the direct 
blocks of the inode_disk. So we get easy access to smaller files.
    The second reason is that this structure also supports larger files, files
can be grown easily by adding levels of indirection which increases the size of
the file exponentially. 




                            SUBDIRECTORIES
                            ==============


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', ‘#define’, or
>> enumeration that was necessary for your subdirectory 
>> implementation.  Identify the purpose of each in 25 words or less.

#define DIR_INIT 8                      
    Number of files to create a directory with initially.

struct inode_disk
  {
    ...
    bool isdir;                         /* Is this inode for a directory? */
    size_t num_files;                   /* Number of files under a directory */
    ...
  };
    Added marker to know if this inode belongs to a directory and if so stores
the number of files contained in it.

struct inode 
  {
    ...
    struct lock dir_lock;               /* lock for directory */
    ...
  };
    Added dir_lock to synchronize directory operations that view or change the 
inode data.

struct dir 
  {
    ...
    bool deny_write;                    /* just to match file struct */
  };
    Added fake bool to make it easy to cast from dir to file for filesys_open.

struct thread
  {
    ...
    struct dir *cwd; 
  }
    The current working directory of the process.


---- ALGORITHMS ----


>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
    The first thing we do is tokenize the path into an array of filenames [1].
The next thing we do is to get the starting directory [2], if the path begins 
with a '/' then we start from root because it is an absolute path else we start 
from the current working directory [3]. Finally in path_lookup we traverse the
path by traversing the array. We look up the filename of wherever the pointer is
in a current directory variable with a dir_lookup [4], we update the pointer and
the current directory variable [5]. We continue this process until the second to
the last filename (for robustness). Then we return the opened current directory.
    [1]: directory.c:202
    [2]: filesys.c:47
    [3]: filesys.c:51-54
    [4]: directory.c:228
    [5]: directory.c:226, 235



---- SYNCHRONIZATION ----


>> B3: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
    On any directory operation that changes or looks up the content of a 
directory, the directory lock, dir_lock has to be acquired first [1]. So any 
simultaneous attempts to perform the same operation on a directory will result 
in only one passing.
    [1] directory.c:182, 261, 336, 385

>> B4: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If that’s not allowed, how do you
>> prevent it?
    No our implementation does not allow this. We remove the directory entry by
marking the inode as removed [1], and setting the directory entry as not in use.
[2]. Any subsequent attempts to perform any operation on this directory will
not be allowed [3].
    [1]: directory.c:355->312
    [2]: directory.c:360
    [3]: directory.c:188, 266, 338, 391



---- RATIONALE ----


>> B5: How is the current directory of a process represented in your
>> implementation? Why did you choose this representation?
>> Give at least two reasons.
    We represent the current directory of a process as a dir struct pointer on
the thread struct.
    a.) It is easy to work with. Most of the directory operations already take a
dir pointer any other representation would require us to convert in one way or
another to a dir pointer.
    b.) It stores information about the state of the directory also like what 
position we currently are in the directory, in case of a readdir.




                           SURVEY QUESTIONS
                           ================


Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?


>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?


>> Any other comments?
